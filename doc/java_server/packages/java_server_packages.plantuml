@startuml
skinparam Linetype polyline
package configuration <<Folder>> {
    package dto <<Folder>> {
        class DTO
        note right
            DTO representing YAML Spring boot configuration, used in AppConfiguration class:
            - Action
            - Feedback
            - Goal
            - Placeholder: strings replaced in configuration
            - Robot
            - Wearable
            - Scripts
            - Storage
        end note
    }
    class AppConfiguration
    note bottom
        YAML Spring Boot configuration
    end note
    class SwaggerConfig
    note bottom
        Swagger configuration, used to produce swagger file (a REST descriptor, with examples)
    end note
    class WebConfig
    note bottom
        Configuration for HTTP server
    end note
    AppConfiguration -> dto: uses
}

package entity <<Folder>> {
    class Entity
    note right
        All entity persisted into database
        - Feedback: data coming from robots, like position
        - Goal: goal to be reached or aborted from robots
        - Wearable Feedback: data coming from wearables, like position
        - Wearable sos: sos triggered by wearables
        - Measurement: environmental data coming from board, like temperature, pressure
        - Node: entity representing some physical or virtual node/robot
        - Item: entity representing an object (book, printer or similar) that user can search with this application
        - Device: a physical device identified from local name and mac_address
        - Neighbour: a device "near" to another device, that sends measurement data to java server
    end note
}

package dto <<Folder>> {
    class DTO
    note right
        All DTOs used in controller packages:
        - Feedback: similar to entity
        - Goal: similar to entity
        - Measurement: similar to entity
        - Node: similar to entity
        - StatusReport: tuple representing a statistical report, with code and value
    end note
    package mapper <<Folder>> {
        interface DTOMapper
        note right
            Extending classes of DTOMapper used to map Entity <-> DTO
        end note
    }
}


package repository <<Folder>> {
    class Repository
    note right
        All repository of entity persisted into database,
        written using JPA
    end note
    Repository --> Entity
}

package util <<Folder>> {
    interface IWatcher
    note right
        Interface used to poll the storage folder
    end note
    class BashScriptRunner
    note right
        Utility to exec bash scripts from java
    end note
}

package service <<Folder>> {
    class Service
    note right
        Services of entity, used to aggregate transactional operations:
        - Action
        - Feedback
        - Goal
        - Measurement
        - Storage
    end note
    class GoalService
    class FeedbackService
    class FileHandlerService
    class ActionFileHandlerService extends FileHandlerService implements IWatcher
    class FeedbackHandlerService extends FileHandlerService implements IWatcher
    class WearableFeedbackFileHandler extends FileHandlerService implements IWatcher
    class WearableSosFileHandler extends FileHandlerService implements IWatcher
    class MeasurementService
    Service --> Repository: uses
    Service --> dto.DTO
}

package controller <<Folder>> {
    class Controller
    note right
        All REST API of entities:
        - Feedback
        - Goal
        - Measurement
        - Node
        - Stats: some statistics exported as REST API
    end note
    Controller --> Service: uses
    Controller --> dto.DTO: uses
}

package runner <<Folder>> {
    class ActionScheduler
    note bottom
        Starts at boot, polling on action folder
    end note
    class FeedbackScheduler
    note bottom
        Starts at boot, polling on feedback folder
    end note
    FeedbackScheduler --> FeedbackService: uses
    ActionScheduler --> ActionService: uses
}

package fs <<Folder>> {
    package dto <<Folder>> {
    }
    package util <<Folder>> {
    }
    interface Reader
    note bottom
        Extending classes used to marshal list of object from file
    end note
    interface Writer
    note bottom
        Extending classes used to marshal list of objects to file
    end note
    Reader --> dto
    Reader --> util
    Writer --> dto
    Writer --> util
}
@enduml